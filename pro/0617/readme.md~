### String类型

String 类似是字符串的对象包装类型，可以使用String构造函数来创建
```javascript
var stringObject = new String("hello world");
```
String对象的方法也可以在所有基本的字符串值中访问到，其中，继承的valueOf()、
toLocaleString()、toString()方法都返回对象所表示的基本字符串值。

String类型的每个实例都有一个length属性，表示字符串包含多少个字符

String类型提供了很多方法,用于辅助完成对ECMAScript中字符串的解析和操作
#### 字符方法
charAt()和charCodeAt() : 用于访问字符串中特定字符。这两个方法都接收一个参数，
即基于0的字符串位置。其中，charAt()方法以单字符字符串的形式返回给定位置的那个字符。
charCodeAt()返回给定位置的那个字符的字符编码
```javascript
var stringValue = "hello world";
console.log(stringValue.charAt(1));//'e'

console.log(stringValue.charCode(1));//'101'
```
ECMAScript还定义了另一个访问个别字符的方法。在支持此方法的浏览器中，可以使用方括号加数字索引来访问字符串中的特定字符
```javascript
var stringValue = "hello world";
console.log(stringValue[1]);//'e'

```
#### 字符串操作方法
concat(),用于将一或多个字符串拼接起来，返回拼接得到的新字符串。
```javascript
var stringValue = "hello ";
var result = stringValue.concat("world");
console.log(result);//'hello world'
console.log(stringValue);//'hello'

```
实际上，concat()方法可以接受任意多个参数，也就是说可以通过它拼接任意多个字符串

```javascript
var stringValue = "hello";
var result = stringValue.concat("world","!");

console.log(result);//'hello world!'
console.log(stringValue);//'hello'
```
虽然concat()是专门用来拼接字符串的方法，但实践中使用更多的还是加法操作符(+)。

ECMAScript还提供了三个基于子字符串创建新字符串的方法：
slice()、substr()、substring()。

这三个方法都会返回被操作字符串的一个子字符串，而且也都会接收一或两个参数。第一个参数指定子字符串的开始位置，第二个参数表示子字符串到哪里结束。

具体来说，slice()和substring()的第二个参数指定的是子字符串最后一个字符后面的位置。
substr()的第二个参数指定的则是返回的字符个数。如果没有给这些方法传递第二个参数，则将字符串的长度作为结束位置。

与concat()方法一样，slice()、substr()、substring()也不会修改字符串本身的值，只是返回一个基本类型的字符串值，对原始字符串没有任何影响。

```javascript
var stringValue = "hello world";
console.log(stringValue.slice(3));//"lo world"
console.log(stringValue.substring(3));//"lo world"
console.log(stringValue.substr(3));//"lo world"

console.log(stringValue.slice(3,7)));//"lo w"
console.log(stringValue.substring(3,7));//"lo w"
console.log(stringValue.substr(3,7));//"lo worl"
```
在传递给这些方法的参数是负值的情况下，它们的行为就不尽相同了。其中，slice()方法会将传入的负值与字符串的长度相加，substr()方法将负的第一个参数加上字符串长度，而将负的第二个参数转换为0。最后，substring()方法会把所有负值参数都转换为0。
```javascript
var stringValue = "hello world";
console.log(stringValue.slice(-3));//"rld"
console.log(stringValue.substring(-3));//"hello world"
console.log(stringValue.substr(-3));//'rld'

console.log(stringValue.slice(3,-4));//"lo w"
console.log(stringValue.substring(3,-4));//"hel"
console.log(stringValue.substr(3,-4));//''
```
在给slice()和substr()传递一个负值参数时，他们的行为相同。这里-3会被转换为8，实际上相当于调用了slice(8)和substr(8)。但是substring()方法则返回了全部的字符串，因为她将-3转化成0

当第二个参数是负数时，这三个方法的行为各不相同。

slice()方法会把第二个参数转换为7，这就相当于调用了slice(3,7)

substring()方法会把第二个参数转换为0，使调用变成了substring(3,0),而这个方法会将较小的数作为开始位置，将较大的数作为结束位置，因此最终相当于调用了substring(0,3)。

substr()也会将第二个参数转换为0，这也就意味着返回包含零个字符的字符串，也就返回一个空字符串。

### 字符串位置方法
indexOf()和lastIndexOf()。这两个方法都是从一个字符串中搜索给定的子字符串，然后返回子字符串的位置，如果没有找到该子字符串，则返回-1。

这两个方法的区别在于，indexOf()方法从字符串开头向后搜索子字符串，lastIndexOf()方法是从子字符串的末尾向前搜索子字符串。
```javascript
var stringValue = 'hello world';
console.log(stringValue.indexOf('o');//4
console.log(stringValue.lastIndexOf('o'));//7
```
这两个方法都可以接收可选的第二个参数，表示从字符串中的哪个位置开始搜索。换句话说，indexOf()会从该参数指定的位置向后搜索，忽略该位置之前的所有字符；而lastIndexOf()则会从指定的位置向前搜索，忽略该位置之后的所有字符
```javascript
var stringValue = 'hello world';
console.log(stringValue.indexOf('o',6);//7
console.log(stringValue.lastIndexOf('o',6));//4
```
在使用第二个参数的情况下，可以通过循环调用indexOf()或者lastIndexOf()来找到所有匹配的子字符串。
```javascript
var stringValue = "Lorem ipsum dolor sit amet, consectetur adipisicing elit";
var positions = new Array();
var pos = stringValue.indexOf('e');
while(pos > -1){
          positions.push(pos);
          pos = stringValue.indexOf('e',pos + 1);
}
console.log(positions);//"3,24,32,35,52"
```

```javascript

```

```javascript

```